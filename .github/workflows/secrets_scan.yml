name: TruffleHog Secrets Scan

on:
  pull_request:
    types:
      - opened
      - synchronize

jobs:
  trufflehog-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install TruffleHog
        run: |
          pip install truffleHog

      - name: Run TruffleHog
        id: trufflehog
        run: |
          trufflehog --json . > trufflehog_output.json

      - name: Extract TruffleHog findings
        id: extract-findings
        run: |
          cat trufflehog_output.json && jq -r '.[] | "Found secret of type \(."DetectorName") in \(."file"): \(."stringsFound"[].string)"' trufflehog_output.json | tee findings.txt

      - name: Add comments to PR
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          const fs = require('fs');
          const findings = fs.readFileSync('findings.txt', 'utf-8').split('\n').filter(line => line !== '');

          const prNumber = process.env.GITHUB_REF.split('/').pop();
          const owner = process.env.GITHUB_REPOSITORY.split('/')[0];
          const repoName = process.env.GITHUB_REPOSITORY.split('/')[1];

          async function createComment(owner, repo, prNumber, body) {
            const { Octokit } = require('@octokit/core');
            const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });

            await octokit.request('POST /repos/:owner/:repo/issues/:issue_number/comments', {
              owner: owner,
              repo: repo,
              issue_number: prNumber,
              body: body
            });
          }

          async function run() {
            if (findings.length > 0) {
              let commentBody = 'TruffleHog Secrets Scan Detected the following secrets:\n\n';
              findings.forEach(secret => {
                commentBody += `- ${secret}\n`;
              });

              await createComment(owner, repoName, prNumber, commentBody);
            }
          }

          run();

